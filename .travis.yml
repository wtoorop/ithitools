sudo: false
language: cpp
addons:
  apt:
    packages:
      - valgrind
      - lcov
      - python
matrix:
  include:
    - os: linux
      compiler: gcc
      env: VALGRIND=true  ANALYSIS=true  COVERAGE=true  DOXYGEN=true
    - os: linux
      compiler: clang
      env: VALGRIND=true  ANALYSIS=false COVERAGE=false DOXYGEN=false
    - os: osx
      compiler: gcc
      env: VALGRIND=false ANALYSIS=false COVERAGE=false DOXYGEN=false
    - os: osx
      compiler: clang
      env: VALGRIND=false ANALYSIS=false COVERAGE=false DOXYGEN=false
script:
  - if $COVERAGE ; then CXXFLAGS="-g -fprofile-arcs -ftest-coverage -O0 -Wall -Wextra -Wpedantic -Werror" CFLAGS="-g -fprofile-arcs -ftest-coverage -O0 -Wall -Wextra -Wpedantic -Werror" LDFLAGS="-lgcov --coverage" cmake . ; elif $VALGRIND || $ANALYSIS ; then CXXFLAGS="-g -Wall -Wextra -Wpedantic -Werror" CFLAGS="-g -Wall -Wextra -Wpedantic -Werror" cmake . ; else CXXFLAGS="-Wall -Wextra -Wpedantic -Werror" CFLAGS="-Wall -Wextra -Wpedantic -Werror" cmake . ; fi
  - make -j 4 VERBOSE=1
  - ./ithitest
  - if $VALGRIND ; then valgrind -v --error-exitcode=1 ./ithitest; fi
  - if $ANALYSIS ; then mkdir analysis ; fi
  - if $ANALYSIS ; then echo 'gitdir\: ../.git' > analysis/.git ; fi
  - if $ANALYSIS ; then (cd analysis && git reset --hard) ; fi
  - if $ANALYSIS ; then (cd analysis && scan-build cmake .) ; fi
  - if $ANALYSIS ; then (cd analysis && scan-build -o ../analysis-results -stats make .) ; fi
  - if $COVERAGE ; then geninfo . -o ithitest.info ; fi
  - if $COVERAGE ; then lcov --remove ithitest.info '/usr/include/*' -o ithi.info ; fi
  - if $COVERAGE ; then genhtml ithi.info --output-directory coverage ; fi
  - python travis/check-dnsstats-tables.py
